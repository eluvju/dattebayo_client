Table = {}
LoadFailed = false
GlobalTargetItemTbl = {}
function table.find(in_table, in_value)
	if type(in_table) ~= "table" then
		return nil
	end
	for k, v in pairs(in_table) do
		if v == in_value then
			return k
		end
	end
	return nil
end

function CreateEnchantInfo()
	local EnchantInfo = {}
	EnchantInfo.Slot = {}
	function EnchantInfo:SetFailed(in_funcName, in_errMsg)
		local EnchantNum = table.find(Table, self)
		MessageBox("Table[ " .. EnchantNum .. " ]:" .. in_funcName .. " : " .. in_errMsg)
		LoadFailed = true
	end

	function EnchantInfo:SetSlotOrder(...)
		if #arg < 1 or MAX_SLOT_NUM < #arg then
			self:SetFailed("SetSlotOrder", "인자의 개수는 1개에서 " .. MAX_SLOT_NUM .. "개 사이어야 합니다.")
		end
		self.SlotOrder = {}
		for i, v in ipairs(arg) do
			if type(v) ~= "number" then
				self:SetFailed("SetSlotOrder", i .. "번째 값은 숫자여야 합니다.")
			elseif v < 0 or v > MAX_SLOT_NUM - 1 then
				self:SetFailed("SetSlotOrder", i .. "번째 값은 0에서 " .. MAX_SLOT_NUM - 1 .. "사이어야 합니다.")
			end
			table.insert(self.SlotOrder, v)
		end
		for k, slotNum in pairs(self.SlotOrder) do
			self.Slot[slotNum] = CreateSlotInfo()
		end
	end

	function EnchantInfo:AddTargetItem(in_targetItem)
		if nil == self.SlotOrder then
			self:SetFailed("AddTargetItem", "SetSlotOrder 함수가 먼저 호출되어야 합니다.")
		end
		if type(in_targetItem) ~= "string" then
			self:SetFailed("AddTargetItem", "값은 문자열이어야 합니다.")
		end
		if nil ~= table.find(GlobalTargetItemTbl, in_targetItem) then
			self:SetFailed("AddTargetItem", "[ " .. in_targetItem .. " ]은 중복된 대상 아이템입니다.")
		else
			table.insert(GlobalTargetItemTbl, in_targetItem)
		end
		local slotCount = C_GetSlotCount(in_targetItem)
		if slotCount > 0 then
			for k, slotNum in pairs(EnchantInfo.SlotOrder) do
				if slotNum < slotCount then
					EnchantInfo:SetFailed("AddTargetItem", "[ " .. in_targetItem .. " ] 활성화 된 슬롯에는 인챈트를 할 수 없습니다. 해당 아이템의 슬롯 개수를 확인해주세요.")
				end
			end
		end
		self.TargetItemTbl = self.TargetItemTbl or {}
		table.insert(self.TargetItemTbl, in_targetItem)
	end

	function EnchantInfo:SetCondition(in_minRefine, in_minGrade)
		if type(in_minRefine) ~= "number" then
			self:SetFailed("SetCondition", "1번째 값[최소 제련도]은 숫자여야 합니다.")
		elseif type(in_minGrade) ~= "number" then
			self:SetFailed("SetCondition", "2번째 값[최소 등급]은 숫자여야 합니다.")
		end
		if in_minRefine < 0 or in_minRefine > MAX_REFINE_LEVEL then
			self:SetFailed("SetCondition", "1번째 값[최소 제련도]은 0과 " .. MAX_REFINE_LEVEL .. "사이어야 합니다.")
		elseif in_minGrade < 0 or in_minGrade > MAX_GRADE_LEVEL then
			self:SetFailed("SetCondition", "2번째 값[최소 등급]은 0과 " .. MAX_GRADE_LEVEL .. "사이어야 합니다.")
		end
		local tbl = {MinRefine = in_minRefine, MinGrade = in_minGrade}
		self.Condition = tbl
	end

	function EnchantInfo:ApproveRandomOption(in_check)
		if type(in_check) ~= "boolean" then
			self:SetFailed("ApproveRandomOption", "인자는 true 혹은 false여야 합니다.")
		end
		self.bApproveRandomOpt = in_check
	end

	function EnchantInfo:SetReset(in_bReset, in_Rate, in_Zeny, ...)
		if type(in_bReset) ~= "boolean" then
			self:SetFailed("SetReset", "1번째 값은 true 혹은 false여야 합니다.")
		elseif type(in_Rate) ~= "number" then
			self:SetFailed("SetReset", "2번째 값은 숫자여야 합니다.")
		elseif type(in_Zeny) ~= "number" then
			self:SetFailed("SetReset", "3번째 값은 숫자여야 합니다.")
		end
		if in_Rate < 0 or in_Rate > 100000 then
			self:SetFailed("SetReset", "2번째 값은 0에서 100000사이어야 합니다.")
		end
		if type(in_Zeny) ~= "number" then
			self:SetFailed("SetReset", "3번째 값은 숫자여야 합니다.")
		elseif in_Zeny < 0 then
			self:SetFailed("SetReset", "3번째 값은 0보다 커야 합니다.")
		end
		if MAX_MATERIAL_NUM < #arg then
			self:SetFailed("SetReset", "재료는 " .. MAX_MATERIAL_NUM .. "종 이하여야 합니다.")
		end
		local tempMatTbl = {}
		for i, matInfo in ipairs(arg) do
			if type(matInfo) ~= "table" then
				self:SetFailed("SetReset", "재료는 테이블 형식으로 작성되어야 합니다.")
			elseif type(matInfo[1]) ~= "string" then
				self:SetFailed("SetReset", "재료 목록이 잘못 작성되었습니다.")
			elseif type(matInfo[2]) ~= "number" then
				self:SetFailed("SetReset", "재료 목록이 잘못 작성되었습니다.")
			end
			tempMatTbl[matInfo[1]] = matInfo[2]
		end
		local tbl = {
			bReset = in_bReset,
			Rate = in_Rate,
			Zeny = in_Zeny,
			MatTbl = tempMatTbl
		}
		self.Reset = tbl
	end

	function EnchantInfo:SetCaution(in_msg)
		if type(in_msg) ~= "string" then
			self:SetFailed("SetCaution", "값은 문자열이어야 합니다.")
		end
		self.CautionMsg = in_msg
	end
	return EnchantInfo
end

function CreateSlotInfo()
	local SlotInfo = {}
	SlotInfo.PerfectECTbl = {}
	SlotInfo.UpgradeECTbl = {}
	function SlotInfo:GetEnchantNum()
		for EnchantNum, EnchantInfo in pairs(Table) do
			local SlotNum = table.find(EnchantInfo.Slot, self)
			if nil ~= SlotNum then
				return EnchantNum, SlotNum
			end
		end
		return nil
	end

	function SlotInfo:SetFailed(in_funcName, in_errMsg)
		local EnchantNum, SlotNum = self:GetEnchantNum()
		MessageBox("Table[ " .. EnchantNum .. " ].Slot[ " .. SlotNum .. " ]:" .. in_funcName .. " : " .. in_errMsg)
		LoadFailed = true
	end

	function SlotInfo:SetRequire(in_Zeny, ...)
		if type(in_Zeny) ~= "number" then
			self:SetFailed("SetRequire", "1번째 값은 숫자여야 합니다.")
		elseif in_Zeny < 0 then
			self:SetFailed("SetRequire", "1번째 값은 0보다 커야 합니다.")
		end
		if MAX_MATERIAL_NUM < #arg then
			self:SetFailed("SetRequire", "재료는 " .. MAX_MATERIAL_NUM .. "종 이하여야 합니다.")
		end
		local tempMatTbl = {}
		for i, matInfo in ipairs(arg) do
			if type(matInfo) ~= "table" then
				self:SetFailed("SetRequire", "재료는 테이블 형식으로 작성되어야 합니다.")
			elseif type(matInfo[1]) ~= "string" then
				self:SetFailed("SetRequire", "재료 목록이 잘못 작성되었습니다.")
			elseif type(matInfo[2]) ~= "number" then
				self:SetFailed("SetRequire", "재료 목록이 잘못 작성되었습니다.")
			end
			tempMatTbl[matInfo[1]] = matInfo[2]
		end
		self.RequireTbl = self.RequireTbl or {}
		self.RequireTbl.Zeny = in_Zeny
		self.RequireTbl.MatTbl = tempMatTbl
	end

	function SlotInfo:SetSuccessRate(in_successRate)
		if type(in_successRate) ~= "number" then
			self:SetFailed("SetSuccessRate", "값은 숫자여야 합니다.")
		elseif in_successRate < 0 or in_successRate > 100000 then
			self:SetFailed("SetSuccessRate", "값은 0에서 100000사이어야 합니다.")
		end
		self.SuccessRate = in_successRate
	end

	function SlotInfo:SetGradeBonus(in_Grade, in_bonusRate)
		if type(in_Grade) ~= "number" then
			self:SetFailed("SetGradeBonus", "1번째 값은 숫자여야 합니다.")
		elseif type(in_bonusRate) ~= "number" then
			self:SetFailed("SetGradeBonus", "2번째 값은 숫자여야 합니다.")
		end
		if in_Grade < 0 or in_Grade > MAX_GRADE_LEVEL then
			self:SetFailed("SetGradeBonus", "1번째 값은 0과 " .. MAX_GRADE_LEVEL .. "사이어야 합니다.")
		elseif in_bonusRate < 0 or in_bonusRate > 100000 then
			self:SetFailed("SetGradeBonus", "2번째 값은 0에서 100000사이어야 합니다.")
		end
		self.GradeBonusTbl = self.GradeBonusTbl or {}
		self.GradeBonusTbl[in_Grade] = in_bonusRate
	end

	function SlotInfo:SetEnchant(in_Grade, in_ItemDB, in_Rate)
		if type(in_Grade) ~= "number" then
			self:SetFailed("SetEnchant", "1번째 값은 숫자여야 합니다.")
		elseif type(in_ItemDB) ~= "string" then
			self:SetFailed("SetEnchant", "2번째 값은 문자열이어야 합니다.")
		elseif type(in_Rate) ~= "number" then
			self:SetFailed("SetEnchant", "3번째 값은 숫자여야 합니다.")
		end
		if in_Grade < 0 or in_Grade > MAX_GRADE_LEVEL then
			self:SetFailed("SetEnchant", "1번째 값은 0과 " .. MAX_GRADE_LEVEL .. "사이어야 합니다.")
		elseif in_Rate < 0 or in_Rate > 100000 then
			self:SetFailed("SetEnchant", "3번째 값은 0에서 100000사이어야 합니다.")
		end
		self.EnchantRateTbl = self.EnchantRateTbl or {}
		self.EnchantRateTbl[in_Grade] = self.EnchantRateTbl[in_Grade] or {}
		self.EnchantRateTbl[in_Grade][in_ItemDB] = in_Rate
	end

	function SlotInfo:AddPerfectEnchant(in_ItemDB, in_Zeny, ...)
		if type(in_ItemDB) ~= "string" then
			self:SetFailed("AddPerfectEnchant", "1번째 값은 문자열이어야 합니다.")
		elseif type(in_Zeny) ~= "number" then
			self:SetFailed("AddPerfectEnchant", "2번째 값은 숫자여야 합니다.")
		end
		if in_Zeny < 0 then
			self:SetFailed("AddPerfectEnchant", "2번째 값은 0보다 커야 합니다.")
		end
		if MAX_MATERIAL_NUM < #arg then
			self:SetFailed("AddPerfectEnchant", "재료는 " .. MAX_MATERIAL_NUM .. "종 이하여야 합니다.")
		end
		local tempMatTbl = {}
		for i, matInfo in ipairs(arg) do
			if type(matInfo) ~= "table" then
				self:SetFailed("AddPerfectEnchant", "재료는 테이블 형식으로 작성되어야 합니다.")
			elseif type(matInfo[1]) ~= "string" then
				self:SetFailed("AddPerfectEnchant", "재료 목록이 잘못 작성되었습니다.")
			elseif type(matInfo[2]) ~= "number" then
				self:SetFailed("AddPerfectEnchant", "재료 목록이 잘못 작성되었습니다.")
			end
			tempMatTbl[matInfo[1]] = matInfo[2]
		end
		local tbl = {Zeny = in_Zeny, MatTbl = tempMatTbl}
		self.PerfectECTbl[in_ItemDB] = tbl
	end

	function SlotInfo:AddUpgradeEnchant(in_ItemDB, in_ResultItemDB, in_Zeny, ...)
		if type(in_ItemDB) ~= "string" then
			self:SetFailed("AddUpgradeEnchant", "1번째 값은 문자열이어야 합니다.")
		elseif type(in_ResultItemDB) ~= "string" then
			self:SetFailed("AddUpgradeEnchant", "2번째 값은 문자열이어야 합니다.")
		elseif type(in_Zeny) ~= "number" then
			self:SetFailed("AddUpgradeEnchant", "3번째 값은 숫자여야 합니다.")
		end
		if in_Zeny < 0 then
			self:SetFailed("AddUpgradeEnchant", "3번째 값은 0보다 커야 합니다.")
		end
		if MAX_MATERIAL_NUM < #arg then
			self:SetFailed("AddUpgradeEnchant", "재료는 " .. MAX_MATERIAL_NUM .. "종 이하여야 합니다.")
		end
		local tempMatTbl = {}
		for i, matInfo in ipairs(arg) do
			if type(matInfo) ~= "table" then
				self:SetFailed("AddPerfectEnchant", "재료는 테이블 형식으로 작성되어야 합니다.")
			elseif type(matInfo[1]) ~= "string" then
				self:SetFailed("AddPerfectEnchant", "재료 목록이 잘못 작성되었습니다.")
			elseif type(matInfo[2]) ~= "number" then
				self:SetFailed("AddPerfectEnchant", "재료 목록이 잘못 작성되었습니다.")
			end
			tempMatTbl[matInfo[1]] = matInfo[2]
		end
		local tbl = {
			ResultItemDB = in_ResultItemDB,
			Zeny = in_Zeny,
			MatTbl = tempMatTbl
		}
		if nil ~= self.UpgradeECTbl[in_ItemDB] then
			self:SetFailed("AddPerfectEnchant", "[ " .. in_ItemDB .. " ]의 정보가 중복되었습니다.")
		end
		self.UpgradeECTbl[in_ItemDB] = tbl
	end
	return SlotInfo
end

function CheckFile()
	for EnchantNum, EnchantInfo in pairs(Table) do
		if nil == EnchantInfo.SlotOrder then
			EnchantInfo:SetFailed("SetSlotOrder", "슬롯 테이블 정보가 존재하지 않습니다.")
		end
		if nil == EnchantInfo.TargetItemTbl then
			EnchantInfo:SetFailed("AddTargetItem", "대상 아이템 정보가 존재하지 않습니다.")
		end
		if nil == EnchantInfo.Condition then
			EnchantInfo:SetFailed("SetCondition", "제한 설정 정보가 존재하지 않습니다.")
		end
		if nil == EnchantInfo.bApproveRandomOpt then
			EnchantInfo:SetFailed("ApproveRandomOption", "랜덤옵션 제한 설정 정보가 존재하지 않습니다.")
		end
		if nil == EnchantInfo.Reset then
			EnchantInfo:SetFailed("SetReset", "초기화 정보가 존재하지 않습니다.")
		end
		if nil == EnchantInfo.CautionMsg then
			EnchantInfo:SetFailed("SetCaution", "주의사항 메세지가 존재하지 않습니다.")
		end
		for slotNum, slotInfo in pairs(EnchantInfo.Slot) do
			if nil == slotInfo.RequireTbl then
				slotInfo:SetFailed("SetRequire", "랜덤인챈트의 재료 정보가 존재하지 않습니다.")
			end
			if nil == slotInfo.SuccessRate then
				slotInfo:SetFailed("SetSuccessRate", "인챈트 성공확룔 정보가 존재하지 않습니다.")
			end
			if nil == slotInfo.GradeBonusTbl then
				slotInfo:SetFailed("SetGradeBonus", "등급별 성공 보너스 정보가 존재하지 않습니다.")
			end
			if nil == slotInfo.EnchantRateTbl then
				slotInfo:SetFailed("SetEnchant", "랜덤인챈트 정보가 존재하지 않습니다.")
			end
			for grade, gradeBonus in pairs(slotInfo.GradeBonusTbl) do
				if slotInfo.SuccessRate + gradeBonus > 100000 then
					slotInfo:SetFailed("SetGradeBonus", "SuccessRate + SetGradeBonus( " .. grade .. " )의 값이 100000을 넘을 수 없습니다.")
				end
			end
			for grade, rateTbl in pairs(slotInfo.EnchantRateTbl) do
				local totalRate = 0
				for itemDB, rate in pairs(rateTbl) do
					totalRate = totalRate + rate
				end
				if totalRate ~= 100000 then
					slotInfo:SetFailed("SetEnchant", grade .. "등급의 확률 총합이 100000이 아닙니다.")
				end
			end
		end
	end
	if true == LoadFailed then
		return false, "EnchantList.lua 파일이 올바르게 작성되지 않았습니다."
	end
	return true, "good"
end

function GetEnchantInfo(in_EnchantNum)
	local EnchantInfo = Table[in_EnchantNum]
	if nil == EnchantInfo then
		return false, in_EnchantNum .. " : 해당 인챈트 정보를 찾을 수 없습니다."
	end
	result, msg = C_SetSlotOrder(in_EnchantNum, EnchantInfo.SlotOrder)
	if not result then
		return false, msg
	end
	for k, TargetItemDB in ipairs(EnchantInfo.TargetItemTbl) do
		result, msg = C_AddTargetItem(in_EnchantNum, TargetItemDB)
		if not result then
			return false, msg
		end
	end
	result, msg = C_SetCondition(in_EnchantNum, EnchantInfo.Condition.MinRefine, EnchantInfo.Condition.MinGrade)
	if not result then
		return false, msg
	end
	result, msg = C_ApproveRandomOption(in_EnchantNum, EnchantInfo.bApproveRandomOpt)
	if not result then
		return false, msg
	end
	result, msg = C_SetReset(in_EnchantNum, EnchantInfo.Reset.bReset, EnchantInfo.Reset.Rate, EnchantInfo.Reset.Zeny, EnchantInfo.Reset.MatTbl)
	if not result then
		return false, msg
	end
	if true == IS_CLIENT then
		result, msg = C_SetCaution(in_EnchantNum, EnchantInfo.CautionMsg)
		if not result then
			return false, msg
		end
	end
	for slotNum, slotInfo in pairs(EnchantInfo.Slot) do
		result, msg = C_SetRequire(in_EnchantNum, slotNum, slotInfo.RequireTbl.Zeny, slotInfo.RequireTbl.MatTbl)
		if not result then
			return false, msg
		end
		result, msg = C_SetSuccessRate(in_EnchantNum, slotNum, slotInfo.SuccessRate)
		if not result then
			return false, msg
		end
		result, msg = C_SetGradeBonus(in_EnchantNum, slotNum, slotInfo.GradeBonusTbl)
		if not result then
			return false, msg
		end
		for grade, rateTbl in pairs(slotInfo.EnchantRateTbl) do
			result, msg = C_SetEnchant(in_EnchantNum, slotNum, grade, rateTbl)
			if not result then
				return false, msg
			end
		end
		for ItemDB, perfectECTInfo in pairs(slotInfo.PerfectECTbl) do
			result, msg = C_AddPerfectEnchant(in_EnchantNum, slotNum, ItemDB, perfectECTInfo.Zeny, perfectECTInfo.MatTbl)
			if not result then
				return false, msg
			end
		end
		for ItemDB, upgradeECTInfo in pairs(slotInfo.UpgradeECTbl) do
			result, msg = C_AddUpgradeEnchant(in_EnchantNum, slotNum, ItemDB, upgradeECTInfo.ResultItemDB, upgradeECTInfo.Zeny, upgradeECTInfo.MatTbl)
			if not result then
				return false, msg
			end
		end
	end
	return true, "good"
end

function LoadAllData()
	for EnchantNum, EnchantInfo in pairs(Table) do
		result, msg = GetEnchantInfo(EnchantNum)
		if not result then
			return false, msg
		end
	end
	return true, "good"
end
